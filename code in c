

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Structure to represent a process
struct Process {
    int id;
    int arrivalTime;
    int burstTime;
    int remainingTime;
    int startTime; // Time when the process starts executing
    int waitingTime;
    int responseTime;
};

int main() {
    int numProcesses = 4;
    int timeQuantum = 2;
    int currentTime = 0;
    int completed = 0;
    int currentProcess = 0; // Index of the currently executing process

    // Initialize an array of processes
    struct Process processes[numProcesses];
    for (int i = 0; i < numProcesses; i++) {
        processes[i].id = i + 1;
        printf("Enter the arrival time for P%d: ", i + 1);
        scanf("%d", &processes[i].arrivalTime);
        printf("Enter the burst time for P%d: ", i + 1);
        scanf("%d", &processes[i].burstTime);
        processes[i].remainingTime = processes[i].burstTime;
        processes[i].waitingTime = 0;
        processes[i].responseTime = -1; // Initialize response time to -1
    }

    // Seed the random number generator
    srand(time(NULL));

    while (currentTime < 100) { // Run for 100 time units
        // Set a flag to check if any process was executed
        int executed = 0;

        for (int i = 0; i < numProcesses; i++) {
            if (processes[i].remainingTime > 0 && processes[i].arrivalTime <= currentTime) {
                executed = 1; // A process is executed

                if (processes[i].responseTime == -1) {
                    processes[i].responseTime = currentTime - processes[i].arrivalTime;
                }

                printf("Time %d: Running P%d\n", currentTime, processes[i].id);
                processes[i].startTime = currentTime;

                if (processes[i].remainingTime <= timeQuantum) {
                    currentTime += processes[i].remainingTime;
                    processes[i].remainingTime = 0;
                    completed++;
                    printf("Time %d: Completed P%d\n", currentTime, processes[i].id);
                    processes[i].waitingTime = currentTime - processes[i].arrivalTime - processes[i].burstTime;
                } else {
                    currentTime += timeQuantum;
                    processes[i].remainingTime -= timeQuantum;
                }
            }
        }

        if (!executed) {
            // No process was executed, so we move time forward
            currentTime++;
        }
    }

    // Calculate and print the waiting and response times for each process
    printf("\nProcess\t\tWaiting Time\tResponse Time\n");
    int totalWaitingTime = 0;
    int totalResponseTime = 0;
    for (int i = 0; i < numProcesses; i++) {
        printf("P%d\t\t\t%d\t\t\t\t%d\n", processes[i].id, processes[i].waitingTime, processes[i].responseTime);
        totalWaitingTime += processes[i].waitingTime;
        totalResponseTime += processes[i].responseTime;
    }

    // Calculate and print the average waiting and response times
    double avgWaitingTime = (double)totalWaitingTime / numProcesses;
    double avgResponseTime = (double)totalResponseTime / numProcesses;
    printf("\nAverage Waiting Time: %.2lf\n", avgWaitingTime);
    printf("Average Response Time: %.2lf\n", avgResponseTime);

}
